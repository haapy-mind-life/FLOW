### HTML 타이머 애플리케이션 코드 설명

이 문서는 주어진 HTML, CSS, JavaScript 기반 명상 타이머 애플리케이션 코드를 쉽게 이해할 수 있도록 구성되었습니다. 아래는 각 코드의 부분과 동작에 대한 자세한 설명입니다.

---

## 1. HTML 구조
HTML은 웹 페이지의 기본 뼈대를 구성합니다. 코드의 HTML 부분은 사용자가 상호작용할 수 있는 버튼과 타이머를 포함합니다.

```html
<!DOCTYPE html>
<html lang="ko">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Project FLOW</title>
```

- `<!DOCTYPE html>`: 이 태그는 HTML5 문서를 나타냅니다.
- `<html lang="ko">`: 문서의 언어가 한국어임을 명시합니다.
- `<head>`: 페이지의 메타데이터를 포함하며, 여기에는 문자 인코딩, 뷰포트 설정, 페이지 제목 등이 포함됩니다.

```html
  <style>
    /* 스타일 정의 */
  </style>
</head>
```

- `<style>`: 페이지에 적용될 CSS 스타일이 포함됩니다. (세부 설명은 아래 CSS 섹션에서 다룸)

### 본문 내용

```html
<body>
  <div id="app">
    <!-- 상단 버튼 -->
    <div class="header-buttons">
      <button id="singing-bowl-mode" class="header-button" title="싱잉볼">🔔</button>
    </div>

    <!-- 타이머 선택 버튼 -->
    <div class="timer-selection">
      <button class="timer-option" data-increment="300">🌱</button>
      <button class="timer-option" data-increment="900">🌳</button>
      <button class="timer-option" data-increment="1800">🌲</button>
    </div>

    <!-- SVG 타이머 -->
    <div id="svg-timer">
      <svg class="progress-ring">
        <circle class="progress-ring__background" r="140" cx="150" cy="150" fill="transparent" stroke="#E6F5E9" stroke-width="10"></circle>
        <circle class="progress-ring__circle" r="140" cx="150" cy="150" fill="transparent"></circle>
      </svg>
      <div class="timer-text">00:00</div>
    </div>

    <!-- 푸터 -->
    <footer>
      <p>© 2024 Project FLOW</p>
    </footer>
  </div>
```

### 주요 요소
1. **상단 버튼**
   - `🔔`: 싱잉볼(명상 종소리)을 재생하는 버튼입니다. 

2. **타이머 선택 버튼**
   - 🌱: 5분 타이머 (`data-increment="300"`)
   - 🌳: 15분 타이머 (`data-increment="900"`)
   - 🌲: 30분 타이머 (`data-increment="1800"`)

3. **SVG 타이머**
   - 원형 진행 표시기로 남은 시간을 시각적으로 보여줍니다.
   - `progress-ring__circle`: 동적인 원형 애니메이션을 통해 진행 상태를 나타냅니다.

4. **푸터**
   - 간단한 저작권 정보 (`© 2024 Project FLOW`).

---

## 2. CSS 스타일링
CSS는 애플리케이션의 시각적 스타일을 정의합니다. 이 코드의 CSS는 사용성을 높이는 직관적인 디자인과 깔끔한 사용자 인터페이스(UI)를 제공합니다.

```css
body {
  background: linear-gradient(to bottom, #E6F5E9, #A3D9A5, #6B8E64);
  font-family: 'Poppins', sans-serif;
  margin: 0;
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
  color: #2F5D34;
}
```
- **배경**: 부드러운 초록색 그라데이션으로 마음을 안정시키는 명상용 테마를 만듭니다.
- **텍스트 스타일**: sans-serif 폰트와 초록색 계열의 텍스트 색상을 사용합니다.

### 주요 컴포넌트 스타일
1. **헤더 버튼**
```css
.header-buttons {
  position: absolute;
  top: 10px;
  right: 10px;
  display: flex;
  gap: 10px;
}

.header-button {
  background: #81C784;
  border: 2px solid #2F5D34;
  border-radius: 50%;
  width: 50px;
  height: 50px;
  font-size: 1.5rem;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  color: white;
}
```
- 버튼을 원형으로 디자인하고 클릭 가능한 효과를 추가합니다.

2. **타이머 버튼**
```css
.timer-option {
  background: linear-gradient(to top, #B6E5AC, #4CAF50);
  border: 2px solid white;
  border-radius: 50%;
  width: 100px;
  height: 100px;
  cursor: pointer;
}
```
- 버튼을 큰 원형으로 설정해 사용자가 쉽게 선택할 수 있도록 합니다.

3. **SVG 타이머**
```css
.progress-ring {
  width: 300px;
  height: 300px;
}

.progress-ring__circle {
  fill: none;
  stroke: #6B8E64;
  stroke-width: 10;
  stroke-dasharray: 880;
  stroke-dashoffset: 880;
  transition: stroke-dashoffset 1s linear;
}
```
- `stroke-dasharray`와 `stroke-dashoffset` 속성을 사용해 원형 진행 표시기를 동적으로 업데이트합니다.

---

## 3. JavaScript 동작
JavaScript는 애플리케이션의 상호작용과 애니메이션을 구현합니다.

```javascript
const FULL_DASH_ARRAY = 880;
let isRunning = false;
let intervalId = null;
```
- `FULL_DASH_ARRAY`: 원형 타이머의 전체 둘레 길이를 설정합니다.
- `isRunning`: 타이머 실행 여부를 나타냅니다.
- `intervalId`: `setInterval` 함수의 ID를 저장해 타이머를 제어합니다.

### 주요 기능
1. **오디오 재생 및 페이드아웃**
```javascript
function playAudio(audio) {
  audio.currentTime = 0;
  audio.volume = 1;
  audio.play().catch(err => console.warn('오디오 재생 실패:', err));
}

function fadeOutAudio(audio, duration = 10000) {
  if (audio.paused) return;
  const step = audio.volume / (duration / 100);
  const fadeInterval = setInterval(() => {
    if (audio.volume > 0.01) {
      audio.volume -= step;
    } else {
      clearInterval(fadeInterval);
      resetAudio(audio);
    }
  }, 100);
}
```
- 명상 음악과 싱잉볼 소리를 재생하거나 서서히 줄입니다.

2. **타이머 시작**
```javascript
function startTimer(duration) {
  if (isRunning) return;
  isRunning = true;
  let timeLeft = duration;
  progressCircle.style.strokeDashoffset = FULL_DASH_ARRAY;
  timerText.textContent = formatTime(timeLeft);
  svgTimer.style.display = 'block';
  document.querySelector('.timer-selection').style.display = 'none';

  playAudio(backgroundMusic);
  intervalId = setInterval(() => {
    if (timeLeft <= 0) {
      clearInterval(intervalId);
      fadeOutAudio(backgroundMusic, 10000);
      setTimeout(() => {
        playSingingBowl();
        resetTimer();
      }, 10000);
    } else {
      timeLeft--;
      timerText.textContent = formatTime(timeLeft);
      progressCircle.style.strokeDashoffset = FULL_DASH_ARRAY * (1 - timeLeft / duration);
    }
  }, 1000);
}
```
- `startTimer(duration)`: 사용자가 선택한 시간 동안 타이머를 실행합니다.
- 타이머 종료 시 배경 음악이 페이드아웃되고 싱잉볼 소리가 재생됩니다.

3. **시간 포맷**
```javascript
function formatTime(seconds) {
  const minutes = Math.floor(seconds / 60);
  const remainingSeconds = seconds % 60;
  return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;
}
```
- 초 단위를 "분:초" 형식으로 변환합니다.

4. **이벤트 처리**
```javascript
document.querySelectorAll('.timer-option').forEach(button => {
  button.addEventListener('click', () => {
    const duration = parseInt(button.dataset.increment, 10);
    startTimer(duration);
  });
});

document.getElementById('singing-bowl-mode').addEventListener('click', playSingingBowl);
```
- 버튼 클릭 시 타이머를 시작하거나 싱잉볼 소리를 재생합니다.

---

## 4. 추가 개선 사항

이 코드를 더욱 발전시키기 위해 다음과 같은 기능을 추가할 수 있습니다:

1. **사용자 커스터마이징**:
   - 사용자가 직접 타이머 시간을 입력할 수 있는 옵션 추가.
   - 다양한 배경 음악 선택 기능 제공.

2. **데이터 저장**:
   - 로컬 스토리지를 사용해 사용자가 마지막으로 설정한 시간을 기억.

3. **알림 기능**:
   - 타이머 종료 시 데스크톱 알림이나 진동 기능 지원.

4. **반응형 디자인**:
   - 모바일 환경에서의 최적화.
   - 화면 크기에 따라 버튼 크기와 레이아웃이 동적으로 조정되도록 개선.

5. **접근성 강화**:
   - 키보드 내비게이션 및 화면 낭독기 지원 추가.

---

## 결론
이 코드는 사용자 친화적인 인터페이스와 부드러운 사용자 경험을 제공합니다. 명상에 필요한 모든 기능이 포함된 직관적인 애플리케이션입니다. 추가 질문이 있거나 특정 부분을 더 자세히 알고 싶다면 알려주세요!

